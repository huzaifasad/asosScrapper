"use client"

import { useState, useEffect, useRef } from "react"
import { supabase } from "@/lib/supabaseClient"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Loader2,
  Search,
  Package,
  AlertCircle,
  Star,
  ExternalLink,
  ShoppingBag,
  ChevronLeft,
  ChevronRight,
  Calendar,
  Shirt,
  Palette,
  Info,
  Terminal,
  CheckCircle,
  XCircle,
  AlertTriangle,
  Zap,
  Activity,
  Play,
  Square,
  RotateCcw,
  Grid3X3,
  FolderOpen,
  ChevronDown,
  Tag
} from "lucide-react"
import { Alert, AlertDescription } from "@/components/ui/alert"

export default function ScraperPage() {
  // Existing states
  const [searchTerm, setSearchTerm] = useState("")
  const [mode, setMode] = useState("limit")
  const [limit, setLimit] = useState("5")
  const [startIndex, setStartIndex] = useState("50")
  const [endIndex, setEndIndex] = useState("100")
  const [loading, setLoading] = useState(false)
  const [results, setResults] = useState(null)
  const [dbProducts, setDbProducts] = useState([])
  const [error, setError] = useState("")
  const [currentImageIndex, setCurrentImageIndex] = useState({})

  // Category states
  const [categories, setCategories] = useState({})
  const [selectedGender, setSelectedGender] = useState("")
  const [selectedMainCategory, setSelectedMainCategory] = useState("")
  const [selectedSubCategory, setSelectedSubCategory] = useState("")
  const [selectedFinalCategory, setSelectedFinalCategory] = useState("")
  const [categoryPath, setCategoryPath] = useState("")
  const [categoryBreadcrumb, setCategoryBreadcrumb] = useState([])

  // Real-time logging states
  const [isConnected, setIsConnected] = useState(false)
  const [logs, setLogs] = useState([])
  const [currentProgress, setCurrentProgress] = useState(null)
  const [scrapingStats, setScrapingStats] = useState(null)
  const [wsConnected, setWsConnected] = useState(false)

  const [currentPage, setCurrentPage] = useState(1)
  const [productsPerPage] = useState(12)
  const [totalProducts, setTotalProducts] = useState(0)

  // Current scraping mode
  const [scrapingMode, setScrapingMode] = useState("search") // "search" or "category"

  const wsRef = useRef(null)
  const logsEndRef = useRef(null)

  // WebSocket connection
  useEffect(() => {
    connectWebSocket()
    fetchCategories()
    
    return () => {
      if (wsRef.current) {
        wsRef.current.close()
      }
    }
  }, [])

  // Auto-scroll logs
  useEffect(() => {
    scrollToBottom()
  }, [logs])

  // Update category path when selections change
  useEffect(() => {
    buildCategoryPath()
  }, [selectedGender, selectedMainCategory, selectedSubCategory, selectedFinalCategory])

  const connectWebSocket = () => {
    try {
      wsRef.current = new WebSocket('ws://localhost:4000')
      
      wsRef.current.onopen = () => {
        console.log('WebSocket connected')
        setWsConnected(true)
        setIsConnected(true)
      }
      
      wsRef.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data)
          handleWebSocketMessage(data)
        } catch (err) {
          console.error('Failed to parse WebSocket message:', err)
        }
      }
      
      wsRef.current.onclose = () => {
        console.log('WebSocket disconnected')
        setWsConnected(false)
        setIsConnected(false)
        
        setTimeout(() => {
          if (!wsRef.current || wsRef.current.readyState === WebSocket.CLOSED) {
            connectWebSocket()
          }
        }, 3000)
      }
      
      wsRef.current.onerror = (error) => {
        console.error('WebSocket error:', error)
        setWsConnected(false)
        setIsConnected(false)
      }
    } catch (err) {
      console.error('Failed to connect WebSocket:', err)
      setWsConnected(false)
      setIsConnected(false)
    }
  }

  const fetchCategories = async () => {
    try {
      const response = await fetch("http://localhost:4000/categories")
      const data = await response.json()
      if (data.success) {
        setCategories(data.categories)
      }
    } catch (err) {
      console.error('Failed to fetch categories:', err)
    }
  }

  const buildCategoryPath = () => {
    const parts = []
    const breadcrumbs = []

    if (selectedGender) {
      parts.push(selectedGender)
      breadcrumbs.push(categories[selectedGender]?.name || selectedGender)
    }

    if (selectedMainCategory && selectedGender) {
      parts.push('subcategories', selectedMainCategory)
      breadcrumbs.push(categories[selectedGender]?.subcategories[selectedMainCategory]?.name || selectedMainCategory)
    }

    if (selectedSubCategory && selectedMainCategory) {
      parts.push('subcategories', selectedSubCategory)
      breadcrumbs.push(categories[selectedGender]?.subcategories[selectedMainCategory]?.subcategories[selectedSubCategory]?.name || selectedSubCategory)
    }

    if (selectedFinalCategory && selectedSubCategory) {
      parts.push('subcategories', selectedFinalCategory)
      breadcrumbs.push(categories[selectedGender]?.subcategories[selectedMainCategory]?.subcategories[selectedSubCategory]?.subcategories[selectedFinalCategory]?.name || selectedFinalCategory)
    }

    setCategoryPath(parts.join('.'))
    setCategoryBreadcrumb(breadcrumbs)
  }

  const resetCategorySelections = () => {
    setSelectedGender("")
    setSelectedMainCategory("")
    setSelectedSubCategory("")
    setSelectedFinalCategory("")
    setCategoryPath("")
    setCategoryBreadcrumb([])
  }

  const handleWebSocketMessage = (data) => {
    const timestamp = new Date(data.timestamp).toLocaleTimeString()
    
    const logEntry = {
      id: Date.now() + Math.random(),
      type: data.type,
      message: data.message,
      timestamp: timestamp,
      data: data
    }
    
    setLogs(prev => [...prev, logEntry])
    
    if (data.progress) {
      setCurrentProgress(data.progress)
    }
    
    if (data.finalStats) {
      setScrapingStats(data.finalStats)
    }
  }

  const scrollToBottom = () => {
    logsEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  const clearLogs = () => {
    setLogs([])
    setCurrentProgress(null)
    setScrapingStats(null)
  }

  const getLogIcon = (type) => {
    switch (type) {
      case 'success':
        return <CheckCircle className="h-4 w-4 text-green-500" />
      case 'error':
        return <XCircle className="h-4 w-4 text-red-500" />
      case 'warning':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />
      case 'progress':
        return <Activity className="h-4 w-4 text-blue-500 animate-pulse" />
      case 'connection':
        return <Zap className="h-4 w-4 text-green-500" />
      default:
        return <Info className="h-4 w-4 text-slate-500" />
    }
  }

  const getLogColor = (type) => {
    switch (type) {
      case 'success':
        return 'border-l-green-500 bg-green-50 dark:bg-green-900/10'
      case 'error':
        return 'border-l-red-500 bg-red-50 dark:bg-red-900/10'
      case 'warning':
        return 'border-l-yellow-500 bg-yellow-50 dark:bg-yellow-900/10'
      case 'progress':
        return 'border-l-blue-500 bg-blue-50 dark:bg-blue-900/10'
      case 'connection':
        return 'border-l-green-500 bg-green-50 dark:bg-green-900/10'
      default:
        return 'border-l-slate-500 bg-slate-50 dark:bg-slate-900/10'
    }
  }

  useEffect(() => {
    fetchProductsFromDB()
  }, [currentPage])

  const fetchProductsFromDB = async () => {
    setLoading(true)

    const { count } = await supabase.from("products").select("*", { count: "exact", head: true })
    setTotalProducts(count || 0)

    const { data, error } = await supabase
      .from("products")
      .select("*")
      .order("created_at", { ascending: false })
      .range((currentPage - 1) * productsPerPage, currentPage * productsPerPage - 1)

    if (error) {
      console.error("Supabase fetch error:", error.message)
      setError(error.message)
    } else {
      setDbProducts(data)
    }
    setLoading(false)
  }

  const handleScrape = async () => {
    if (scrapingMode === "search" && !searchTerm.trim()) {
      setError("Please enter a search term")
      return
    }

    if (scrapingMode === "category" && !categoryPath) {
      setError("Please select a category")
      return
    }

    setLoading(true)
    setError("")
    setResults(null)
    clearLogs()

    try {
      const requestBody = {
        mode: mode,
      }

      if (mode === "limit") {
        requestBody.limit = Number.parseInt(limit)
      } else if (mode === "range") {
        requestBody.startIndex = Number.parseInt(startIndex)
        requestBody.endIndex = Number.parseInt(endIndex)
      }

      let endpoint, body
      if (scrapingMode === "search") {
        endpoint = "http://localhost:4000/scrape"
        body = {
          ...requestBody,
          searchTerm: searchTerm.trim()
        }
      } else {
        endpoint = "http://localhost:4000/scrape-category"
        body = {
          ...requestBody,
          categoryPath: categoryPath
        }
      }

      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()
      setResults(data)

      await fetchProductsFromDB()
    } catch (err) {
      setError(`Failed to scrape: ${err.message}`)
    } finally {
      setLoading(false)
    }
  }

  const renderCategorySelector = () => {
    if (!categories || Object.keys(categories).length === 0) {
      return (
        <div className="text-center py-8">
          <Loader2 className="h-8 w-8 animate-spin mx-auto mb-2" />
          <p className="text-sm text-muted-foreground">Loading categories...</p>
        </div>
      )
    }

    return (
      <div className="space-y-4">
        {/* Gender Selection */}
        <div className="space-y-2">
          <Label className="text-sm font-medium">Gender</Label>
          <Select value={selectedGender} onValueChange={(value) => {
            setSelectedGender(value)
            setSelectedMainCategory("")
            setSelectedSubCategory("")
            setSelectedFinalCategory("")
          }}>
            <SelectTrigger>
              <SelectValue placeholder="Select gender" />
            </SelectTrigger>
            <SelectContent>
              {Object.entries(categories).map(([key, category]) => (
                <SelectItem key={key} value={key}>
                  {category.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Main Category Selection */}
        {selectedGender && categories[selectedGender]?.subcategories && (
          <div className="space-y-2">
            <Label className="text-sm font-medium">Main Category</Label>
            <Select value={selectedMainCategory} onValueChange={(value) => {
              setSelectedMainCategory(value)
              setSelectedSubCategory("")
              setSelectedFinalCategory("")
            }}>
              <SelectTrigger>
                <SelectValue placeholder="Select main category" />
              </SelectTrigger>
              <SelectContent>
                {Object.entries(categories[selectedGender].subcategories).map(([key, category]) => (
                  <SelectItem key={key} value={key}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        )}

        {/* Sub Category Selection */}
        {selectedMainCategory && categories[selectedGender]?.subcategories[selectedMainCategory]?.subcategories && (
          <div className="space-y-2">
            <Label className="text-sm font-medium">Sub Category</Label>
            <Select value={selectedSubCategory} onValueChange={(value) => {
              setSelectedSubCategory(value)
              setSelectedFinalCategory("")
            }}>
              <SelectTrigger>
                <SelectValue placeholder="Select sub category" />
              </SelectTrigger>
              <SelectContent>
                {Object.entries(categories[selectedGender].subcategories[selectedMainCategory].subcategories).map(([key, category]) => (
                  <SelectItem key={key} value={key}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        )}

        {/* Final Category Selection */}
        {selectedSubCategory && categories[selectedGender]?.subcategories[selectedMainCategory]?.subcategories[selectedSubCategory]?.subcategories && (
          <div className="space-y-2">
            <Label className="text-sm font-medium">Final Category</Label>
            <Select value={selectedFinalCategory} onValueChange={setSelectedFinalCategory}>
              <SelectTrigger>
                <SelectValue placeholder="Select final category" />
              </SelectTrigger>
              <SelectContent>
                {Object.entries(categories[selectedGender].subcategories[selectedMainCategory].subcategories[selectedSubCategory].subcategories).map(([key, category]) => (
                  <SelectItem key={key} value={key}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        )}

        {/* Category Breadcrumb */}
        {categoryBreadcrumb.length > 0 && (
          <div className="flex items-center gap-2 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
            <FolderOpen className="h-4 w-4 text-blue-600" />
            <span className="text-sm font-medium text-blue-800 dark:text-blue-200">
              {categoryBreadcrumb.join(' > ')}
            </span>
            <Button
              variant="ghost"
              size="sm"
              onClick={resetCategorySelections}
              className="ml-auto h-6 px-2 text-blue-600 hover:text-blue-800"
            >
              <RotateCcw className="h-3 w-3" />
            </Button>
          </div>
        )}
      </div>
    )
  }

  // Continue with existing render functions for product display, pagination, etc.
  const renderProductImages = (product) => {
    if (!product.images) return null

    const imageArray = Array.isArray(product.images) ? product.images : [product.images]
    const currentIndex = currentImageIndex[product.id] || 0
    const currentImage = imageArray[currentIndex] || imageArray[0]

    const nextImage = () => {
      setCurrentImageIndex((prev) => ({
        ...prev,
        [product.id]: (currentIndex + 1) % imageArray.length,
      }))
    }

    const prevImage = () => {
      setCurrentImageIndex((prev) => ({
        ...prev,
        [product.id]: currentIndex === 0 ? imageArray.length - 1 : currentIndex - 1,
      }))
    }

    const goToImage = (index) => {
      setCurrentImageIndex((prev) => ({
        ...prev,
        [product.id]: index,
      }))
    }

    return (
      <div className="space-y-3">
        <div className="relative overflow-hidden rounded-xl bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-900 aspect-square group shadow-sm">
          <img
            src={currentImage || "/placeholder.svg"}
            alt={product.name}
            className="w-full h-full object-cover transition-all duration-500 group-hover:scale-110"
            loading="lazy"
          />
          {imageArray.length > 1 && (
            <>
              <button
                onClick={prevImage}
                className="absolute left-2 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-slate-800 rounded-full p-2 opacity-0 group-hover:opacity-100 transition-all duration-300 shadow-lg hover:shadow-xl hover:scale-110"
              >
                <ChevronLeft className="h-4 w-4" />
              </button>
              <button
                onClick={nextImage}
                className="absolute right-2 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-slate-800 rounded-full p-2 opacity-0 group-hover:opacity-100 transition-all duration-300 shadow-lg hover:shadow-xl hover:scale-110"
              >
                <ChevronRight className="h-4 w-4" />
              </button>
              <div className="absolute bottom-3 left-1/2 -translate-x-1/2 flex gap-1.5 bg-black/20 backdrop-blur-sm rounded-full px-3 py-1.5">
                {imageArray.slice(0, 8).map((_, index) => (
                  <button
                    key={index}
                    onClick={() => goToImage(index)}
                    className={`w-2 h-2 rounded-full transition-all duration-300 ${
                      index === currentIndex
                        ? "bg-white scale-125 shadow-sm"
                        : "bg-white/60 hover:bg-white/80 hover:scale-110"
                    }`}
                  />
                ))}
                {imageArray.length > 8 && (
                  <span className="text-white text-xs ml-2 font-medium">+{imageArray.length - 8}</span>
                )}
              </div>
            </>
          )}
        </div>
        {imageArray.length > 1 && (
          <div className="flex gap-2 overflow-x-auto pb-2 scrollbar-hide">
            {imageArray.slice(0, 6).map((img, index) => (
              <button
                key={index}
                onClick={() => goToImage(index)}
                className={`relative overflow-hidden rounded-lg bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-900 w-16 h-16 flex-shrink-0 border-2 transition-all duration-300 shadow-sm hover:shadow-md ${
                  index === currentIndex
                    ? "border-blue-500 ring-2 ring-blue-200 dark:ring-blue-800 scale-105"
                    : "border-slate-200 dark:border-slate-700 hover:border-slate-300 dark:hover:border-slate-600 hover:scale-105"
                }`}
              >
                <img
                  src={img || "/placeholder.svg"}
                  alt={`${product.name} ${index + 1}`}
                  className="w-full h-full object-cover"
                  loading="lazy"
                />
              </button>
            ))}
            {imageArray.length > 6 && (
              <div className="w-16 h-16 flex-shrink-0 bg-gradient-to-br from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-800 rounded-lg flex items-center justify-center text-xs text-slate-600 dark:text-slate-400 font-medium border-2 border-slate-200 dark:border-slate-700">
                +{imageArray.length - 6}
              </div>
            )}
          </div>
        )}
      </div>
    )
  }

  const renderPagination = () => {
    const totalPages = Math.ceil(totalProducts / productsPerPage)

    if (totalPages <= 1) return null

    const getPageNumbers = () => {
      const pages = []
      const maxVisiblePages = 5

      if (totalPages <= maxVisiblePages) {
        for (let i = 1; i <= totalPages; i++) {
          pages.push(i)
        }
      } else {
        if (currentPage <= 3) {
          for (let i = 1; i <= 4; i++) {
            pages.push(i)
          }
          pages.push("...")
          pages.push(totalPages)
        } else if (currentPage >= totalPages - 2) {
          pages.push(1)
          pages.push("...")
          for (let i = totalPages - 3; i <= totalPages; i++) {
            pages.push(i)
          }
        } else {
          pages.push(1)
          pages.push("...")
          for (let i = currentPage - 1; i <= currentPage + 1; i++) {
            pages.push(i)
          }
          pages.push("...")
          pages.push(totalPages)
        }
      }

      return pages
    }

    return (
      <div className="flex items-center justify-center gap-2 mt-8 flex-wrap">
        <Button
          variant="outline"
          size="sm"
          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
          disabled={currentPage === 1}
          className="flex items-center gap-2 bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-700 transition-all duration-200"
        >
          <ChevronLeft className="h-4 w-4" />
          <span className="hidden sm:inline">Previous</span>
        </Button>

        <div className="flex items-center gap-1 flex-wrap">
          {getPageNumbers().map((page, index) =>
            page === "..." ? (
              <span key={index} className="px-3 py-2 text-slate-500 dark:text-slate-400">
                ...
              </span>
            ) : (
              <Button
                key={index}
                variant={currentPage === page ? "default" : "outline"}
                size="sm"
                onClick={() => setCurrentPage(page)}
                className={`min-w-[40px] transition-all duration-200 ${
                  currentPage === page
                    ? "bg-blue-600 hover:bg-blue-700 text-white shadow-md"
                    : "bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-700"
                }`}
              >
                {page}
              </Button>
            ),
          )}
        </div>

        <Button
          variant="outline"
          size="sm"
          onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
          disabled={currentPage === totalPages}
          className="flex items-center gap-2 bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-700 transition-all duration-200"
        >
          <span className="hidden sm:inline">Next</span>
          <ChevronRight className="h-4 w-4" />
        </Button>
      </div>
    )
  }

  const getColorHex = (colorName) => {
    const colorMap = {
      red: "#ef4444", blue: "#3b82f6", green: "#22c55e", yellow: "#eab308",
      orange: "#f97316", purple: "#a855f7", pink: "#ec4899", black: "#000000",
      white: "#ffffff", gray: "#6b7280", grey: "#6b7280", brown: "#92400e",
      navy: "#1e3a8a", beige: "#f5f5dc", cream: "#fffdd0", tan: "#d2b48c"
    }
    const normalizedColor = colorName.toLowerCase().trim()
    return colorMap[normalizedColor] || "#6b7280"
  }

  const renderColorSwatches = (colorString) => {
    if (!colorString) return null

    const colors = colorString
      .split(",")
      .map((color) => color.trim())
      .filter((color) => color.length > 0)

    if (colors.length === 0) return null

    return (
      <div className="space-y-2">
        <div className="flex items-center gap-2 text-sm">
          <Palette className="h-4 w-4 text-muted-foreground" />
          <span className="font-medium">Colors:</span>
        </div>
        <div className="flex flex-wrap gap-2">
          {colors.map((color, index) => {
            const isOutOfStock = color.toLowerCase().includes("out of stock")
            const cleanColor = color
              .replace(/colour out of stock/gi, "")
              .replace(/out of stock/gi, "")
              .trim()
            const hexColor = getColorHex(cleanColor)

            return (
              <div
                key={index}
                className={`flex items-center gap-2 px-3 py-1.5 rounded-full text-xs font-medium transition-all duration-200 border ${
                  isOutOfStock
                    ? "bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800 text-red-700 dark:text-red-300"
                    : "bg-slate-50 dark:bg-slate-800 border-slate-200 dark:border-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700"
                }`}
              >
                <div
                  className={`w-4 h-4 rounded-full border-2 border-white dark:border-slate-600 shadow-sm flex-shrink-0 ${
                    isOutOfStock ? "opacity-50" : ""
                  }`}
                  style={{ backgroundColor: hexColor }}
                  title={cleanColor}
                />
                <span className="capitalize leading-none">
                  {isOutOfStock ? (
                    <>
                      {cleanColor}
                      <span className="ml-1 text-red-500 font-semibold">(Out of Stock)</span>
                    </>
                  ) : (
                    cleanColor
                  )}
                </span>
              </div>
            )
          })}
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 p-3 sm:p-4 lg:p-6 xl:p-8">
      <div className="max-w-7xl mx-auto space-y-6 sm:space-y-8">
        {/* Header */}
        <div className="text-center space-y-3 sm:space-y-4 py-6 sm:py-8">
          <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-slate-900 via-blue-800 to-slate-900 dark:from-white dark:via-blue-200 dark:to-white bg-clip-text text-transparent tracking-tight text-balance">
            Product Scraper
          </h1>
          <p className="text-sm sm:text-base lg:text-lg text-slate-600 dark:text-slate-400 max-w-2xl mx-auto leading-relaxed text-pretty">
            Search products or browse by category with real-time progress tracking
          </p>
          
          {/* WebSocket Connection Status */}
          <div className="flex items-center justify-center gap-2">
            <div className={`w-2 h-2 rounded-full ${wsConnected ? 'bg-green-500' : 'bg-red-500'} animate-pulse`}></div>
            <span className="text-xs text-slate-500 dark:text-slate-400">
              {wsConnected ? 'Real-time connected' : 'Connection lost - trying to reconnect...'}
            </span>
          </div>
        </div>

        {/* Real-time Logs Panel */}
        <Card className="transition-all duration-300 hover:shadow-xl border-slate-200 dark:border-slate-700 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm">
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-3 text-lg text-slate-900 dark:text-white">
                <Terminal className="h-5 w-5 text-green-600 dark:text-green-400" />
                Real-time Scraping Logs
                {loading && <Loader2 className="h-4 w-4 animate-spin text-blue-500" />}
              </CardTitle>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={clearLogs}
                  className="text-xs"
                >
                  <RotateCcw className="h-3 w-3 mr-1" />
                  Clear
                </Button>
                <Button
                  variant="outline" 
                  size="sm"
                  onClick={scrollToBottom}
                  className="text-xs"
                >
                  <Square className="h-3 w-3 mr-1" />
                  Bottom
                </Button>
              </div>
            </div>
            
            {/* Progress Bar */}
            {currentProgress && (
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Progress: {currentProgress.current} / {currentProgress.total}</span>
                  <span>{currentProgress.percentage}%</span>
                </div>
                <Progress value={currentProgress.percentage} className="h-2" />
              </div>
            )}
            
            {/* Final Stats */}
            {scrapingStats && (
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                <div className="text-center">
                  <div className="text-lg font-bold text-blue-600 dark:text-blue-400">{scrapingStats.totalFound}</div>
                  <div className="text-xs text-slate-600 dark:text-slate-400">Found</div>
                </div>
                <div className="text-center">
                  <div className="text-lg font-bold text-green-600 dark:text-green-400">{scrapingStats.totalSuccessful}</div>
                  <div className="text-xs text-slate-600 dark:text-slate-400">Successful</div>
                </div>
                <div className="text-center">
                  <div className="text-lg font-bold text-red-600 dark:text-red-400">{scrapingStats.totalFailed}</div>
                  <div className="text-xs text-slate-600 dark:text-slate-400">Failed</div>
                </div>
                <div className="text-center">
                  <div className="text-lg font-bold text-purple-600 dark:text-purple-400">
                    {scrapingStats.scrapeType === 'category' ? scrapingStats.categoryName : scrapingStats.searchTerm}
                  </div>
                  <div className="text-xs text-slate-600 dark:text-slate-400">
                    {scrapingStats.scrapeType === 'category' ? 'Category' : 'Search'}
                  </div>
                </div>
              </div>
            )}
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-64 w-full rounded-md border bg-slate-50 dark:bg-slate-900/50 p-4">
              <div className="space-y-2">
                {logs.length === 0 ? (
                  <div className="flex items-center justify-center h-32 text-slate-500 dark:text-slate-400">
                    <div className="text-center">
                      <Terminal className="h-8 w-8 mx-auto mb-2 opacity-50" />
                      <p className="text-sm">No logs yet. Start scraping to see real-time progress.</p>
                    </div>
                  </div>
                ) : (
                  logs.map((log) => (
                    <div
                      key={log.id}
                      className={`flex items-start gap-3 p-3 rounded-lg border-l-4 transition-all duration-200 ${getLogColor(log.type)}`}
                    >
                      {getLogIcon(log.type)}
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-1">
                          <span className="text-xs font-mono text-slate-500 dark:text-slate-400">
                            {log.timestamp}
                          </span>
                          <Badge variant="outline" className="text-xs capitalize">
                            {log.type}
                          </Badge>
                        </div>
                        <p className="text-sm text-slate-700 dark:text-slate-300 leading-relaxed break-words">
                          {log.message}
                        </p>
                        {log.data.productData && (
                          <div className="mt-2 p-2 bg-white/50 dark:bg-slate-800/50 rounded text-xs">
                            <span className="font-semibold">{log.data.productData.name}</span>
                            {log.data.productData.price && (
                              <span className="ml-2 text-green-600">
                                {log.data.productData.currency}{log.data.productData.price}
                              </span>
                            )}
                            {log.data.productData.brand && (
                              <span className="ml-2 text-slate-500">• {log.data.productData.brand}</span>
                            )}
                            {log.data.productData.category && (
                              <span className="ml-2 text-blue-500">• {log.data.productData.category}</span>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  ))
                )}
                <div ref={logsEndRef} />
              </div>
            </ScrollArea>
          </CardContent>
        </Card>

        {/* Scrape Configuration with Tabs */}
        <Card className="transition-all duration-300 hover:shadow-xl border-slate-200 dark:border-slate-700 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm">
          <CardHeader className="pb-4 sm:pb-6">
            <CardTitle className="flex items-center gap-3 text-lg sm:text-xl text-slate-900 dark:text-white">
              <Search className="h-5 w-5 sm:h-6 sm:w-6 text-blue-600 dark:text-blue-400" />
              Scraping Configuration
            </CardTitle>
            <CardDescription className="text-sm sm:text-base leading-relaxed text-slate-600 dark:text-slate-400">
              Choose between search-based scraping or category-based scraping
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4 sm:space-y-6">
            <Tabs value={scrapingMode} onValueChange={setScrapingMode} className="w-full">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="search" className="flex items-center gap-2">
                  <Search className="h-4 w-4" />
                  Search Mode
                </TabsTrigger>
                <TabsTrigger value="category" className="flex items-center gap-2">
                  <Grid3X3 className="h-4 w-4" />
                  Category Mode
                </TabsTrigger>
              </TabsList>
              
              <TabsContent value="search" className="space-y-4">
                <div className="space-y-3">
                  <Label htmlFor="searchTerm" className="text-sm font-medium text-slate-700 dark:text-slate-300">
                    Search Term
                  </Label>
                  <Input
                    id="searchTerm"
                    placeholder="e.g., loafers, sneakers, boots..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="h-12 text-base transition-all duration-200 focus:ring-2 focus:ring-blue-500/20 border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800"
                  />
                </div>
              </TabsContent>
              
              <TabsContent value="category" className="space-y-4">
                {renderCategorySelector()}
              </TabsContent>
            </Tabs>

            <div className="space-y-3">
              <Label htmlFor="mode" className="text-sm font-medium text-slate-700 dark:text-slate-300">
                Scraping Mode
              </Label>
              <Select value={mode} onValueChange={setMode}>
                <SelectTrigger className="h-12 text-base transition-all duration-200 border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800">
                  <SelectValue placeholder="Select scraping mode" />
                </SelectTrigger>
                <SelectContent className="bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700">
                  <SelectItem value="limit" className="text-base py-3">
                    Limit Mode - Scrape specific number of products
                  </SelectItem>
                  <SelectItem value="range" className="text-base py-3">
                    Range Mode - Scrape products within index range
                  </SelectItem>
                  <SelectItem value="full" className="text-base py-3">
                    Full Mode - Scrape all available products
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="transition-all duration-300 ease-in-out">
              {mode === "limit" && (
                <div className="space-y-3 animate-in slide-in-from-top-2 duration-300">
                  <Label htmlFor="limit" className="text-sm font-medium text-slate-700 dark:text-slate-300">
                    Number of Products to Scrape
                  </Label>
                  <Input
                    id="limit"
                    type="number"
                    placeholder="5"
                    value={limit}
                    onChange={(e) => setLimit(e.target.value)}
                    className="h-12 text-base transition-all duration-200 focus:ring-2 focus:ring-blue-500/20 border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800"
                  />
                </div>
              )}

              {mode === "range" && (
                <div className="animate-in slide-in-from-top-2 duration-300">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-3">
                      <Label htmlFor="startIndex" className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        Start Index
                      </Label>
                      <Input
                        id="startIndex"
                        type="number"
                        placeholder="50"
                        value={startIndex}
                        onChange={(e) => setStartIndex(e.target.value)}
                        className="h-12 text-base transition-all duration-200 focus:ring-2 focus:ring-blue-500/20 border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800"
                      />
                    </div>
                    <div className="space-y-3">
                      <Label htmlFor="endIndex" className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        End Index
                      </Label>
                      <Input
                        id="endIndex"
                        type="number"
                        placeholder="100"
                        value={endIndex}
                        onChange={(e) => setEndIndex(e.target.value)}
                        className="h-12 text-base transition-all duration-200 focus:ring-2 focus:ring-blue-500/20 border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800"
                      />
                    </div>
                  </div>
                </div>
              )}
            </div>

            {error && (
              <Alert
                variant="destructive"
                className="animate-in slide-in-from-top-2 duration-300 border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-900/20"
              >
                <AlertCircle className="h-4 w-4 sm:h-5 sm:w-5" />
                <AlertDescription className="text-sm sm:text-base">{error}</AlertDescription>
              </Alert>
            )}

            <Button
              onClick={handleScrape}
              disabled={loading || !wsConnected || (scrapingMode === "search" && !searchTerm.trim()) || (scrapingMode === "category" && !categoryPath)}
              className="w-full h-12 sm:h-14 text-base font-medium transition-all duration-300 hover:scale-[1.02] active:scale-[0.98] bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-lg hover:shadow-xl disabled:from-slate-400 disabled:to-slate-500"
            >
              {loading ? (
                <>
                  <Loader2 className="mr-2 sm:mr-3 h-4 w-4 sm:h-5 sm:w-5 animate-spin" />
                  Scraping Products...
                </>
              ) : (
                <>
                  <Play className="mr-2 sm:mr-3 h-4 w-4 sm:h-5 sm:w-5" />
                  {scrapingMode === "search" ? "Start Search Scraping" : "Start Category Scraping"}
                </>
              )}
            </Button>
            
            {!wsConnected && (
              <Alert className="border-yellow-200 dark:border-yellow-800 bg-yellow-50 dark:bg-yellow-900/20">
                <AlertTriangle className="h-4 w-4 text-yellow-600" />
                <AlertDescription className="text-sm text-yellow-800 dark:text-yellow-200">
                  WebSocket connection is required for real-time progress tracking. Please wait for reconnection.
                </AlertDescription>
              </Alert>
            )}
          </CardContent>
        </Card>

        {/* Products Display */}
        <Card className="animate-in slide-in-from-bottom-4 duration-500 border-slate-200 dark:border-slate-700 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm">
          <CardHeader className="pb-4 sm:pb-6">
            <CardTitle className="flex items-center gap-3 text-lg sm:text-xl text-slate-900 dark:text-white">
              <Package className="h-5 w-5 sm:h-6 sm:w-6 text-blue-600 dark:text-blue-400" />
              Products from Database
            </CardTitle>
            <CardDescription className="text-sm sm:text-base text-slate-600 dark:text-slate-400">
              Showing {dbProducts.length} of {totalProducts} products (Page {currentPage} of{" "}
              {Math.ceil(totalProducts / productsPerPage)})
            </CardDescription>
          </CardHeader>
          <CardContent>
            {dbProducts.length > 0 ? (
              <>
                <div className="grid gap-4 sm:gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-4">
                  {dbProducts.map((product) => (
                    <Card
                      key={product.id}
                      className="h-full transition-all duration-300 hover:shadow-2xl hover:scale-[1.03] group border-slate-200 dark:border-slate-700 hover:border-blue-300 dark:hover:border-blue-600 flex flex-col bg-white dark:bg-slate-800 overflow-hidden"
                    >
                      <CardContent className="p-4 sm:p-6 flex-1 flex flex-col">
                        <div className="space-y-4 sm:space-y-5 flex-1 flex flex-col">
                          {product.images && renderProductImages(product)}

                          <div className="space-y-3 flex-1">
                            <div className="flex flex-wrap gap-2">
                              {product.brand && (
                                <Badge
                                  variant="secondary"
                                  className="text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 border-blue-200 dark:border-blue-700"
                                >
                                  {product.brand}
                                </Badge>
                              )}
                              {product.scraped_category && (
                                <Badge
                                  variant="outline"
                                  className="text-xs border-green-300 dark:border-green-600 text-green-700 dark:text-green-300 bg-green-50 dark:bg-green-900/20"
                                >
                                  <Tag className="h-3 w-3 mr-1" />
                                  {product.scraped_category}
                                </Badge>
                              )}
                              {product.scrape_type && (
                                <Badge
                                  variant="outline"
                                  className="text-xs border-purple-300 dark:border-purple-600 text-purple-700 dark:text-purple-300"
                                >
                                  {product.scrape_type === 'search' ? 'Search' : 'Category'}
                                </Badge>
                              )}
                              {product.stock_status && (
                                <Badge
                                  variant={
                                    product.stock_status.toLowerCase().includes("available") ? "default" : "destructive"
                                  }
                                  className={`text-xs ${
                                    product.stock_status.toLowerCase().includes("available")
                                      ? "bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 border-green-200 dark:border-green-700"
                                      : "bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 border-red-200 dark:border-red-700"
                                  }`}
                                >
                                  {product.stock_status}
                                </Badge>
                              )}
                            </div>

                            <h3 className="font-semibold text-base sm:text-lg leading-tight line-clamp-2 text-balance group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-200 text-slate-900 dark:text-white">
                              {product.name}
                            </h3>

                            <div className="space-y-3 flex-1">
                              {product.description && (
                                <p className="text-sm text-muted-foreground line-clamp-3 leading-relaxed">
                                  {product.description}
                                </p>
                              )}

                              {product.price && (
                                <div className="flex items-center gap-2">
                                  <p className="text-xl sm:text-2xl font-bold text-primary">
                                    {product.currency || "£"}
                                    {product.price}
                                  </p>
                                </div>
                              )}

                              {product.color && renderColorSwatches(product.color)}

                              {product.size && (
                                <div className="space-y-2">
                                  <div className="flex items-center gap-2 text-sm">
                                    <Shirt className="h-4 w-4 text-muted-foreground" />
                                    <span className="font-medium">Available Sizes:</span>
                                  </div>
                                  <p className="text-xs text-muted-foreground leading-relaxed">{product.size}</p>
                                </div>
                              )}
                            </div>
                          </div>

                          {product.product_url && (
                            <Button
                              asChild
                              variant="outline"
                              className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-all duration-200 bg-transparent mt-auto"
                            >
                              <a
                                href={product.product_url}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="flex items-center justify-center gap-2 text-xs sm:text-sm"
                              >
                                <ExternalLink className="h-3 w-3 sm:h-4 sm:w-4" />
                                View Product
                              </a>
                            </Button>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>

                {renderPagination()}
              </>
            ) : (
              <div className="text-center py-12 sm:py-16 text-slate-500 dark:text-slate-400">
                <Package className="h-16 w-16 sm:h-20 sm:w-20 mx-auto mb-4 sm:mb-6 opacity-30" />
                <p className="text-lg sm:text-xl font-medium mb-2">No products found in database</p>
                <p className="text-sm">Start scraping to see products here</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}